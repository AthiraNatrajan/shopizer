openapi: 3.0.1
info:
  title: Api Documentation
  description: Api Documentation
  termsOfService: urn:tos
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
servers:
- url: http://localhost:8080/
tags:
  - name: authenticate-customer
    description: Customer authentication resource (Customer Authentication Api)
  - name: authenticate-user
    description: Authenticate User Api
  - name: cache
    description: Cache Api
  - name: catalog
    description: Catalog management resource (Catalog Management Api)
  - name: category
    description: Category management resource (Category Management Api)
  - name: contact
    description: Contact Api
  - name: content
    description: Content management resource (Content Management Api)
  - name: customer-newsletter
    description: Customer Newsletter Api
  - name: customer-review
    description: Customer Review Api
  - name: customer
    description: Customer management resource (Customer Management Api)
  - name: manufacturer
    description: manufacturer-api Api)
  - name: market-place
    description: Market Place Api
  - name: merchant-store
    description: Merchant and store management resource (Merchant - Store Management Api)
  - name: optin
    description: Optin Api
  - name: order
    description: Order Api
  - name: order-payment
    description: Order Payment Api
  - name: order-shipping
    description: Shipping Quotes and Calculation resource (Shipping Api)
  - name: order-total
    description: Order Total Api
  - name: product
    description: Product management resource (Product Management Api)
  - name: product-group
    description: Product groups management resource (Product Groups Management Api)
  - name: product-image
    description: Product Image Api
  - name: product-inventory
    description: Product inventory resource (Product Inventory Api)
  - name: product-option
    description: Product attributes / options / values management resource (Product Option Management Api)
  - name: product-relationship
    description: Product Relationship Api
  - name: product-review
    description: Product Review Api
  - name: product-type
    description: Product type resource (Product Type Api)
  - name: product-variant
    description: Product Variant Api
  - name: public-configs
    description: Public Configs Api
  - name: references
    description: References Api
  - name: search
    description: Search products and search word/sentence completion functionality (Search Api)
  - name: security
    description: Security Api
  - name: shopping-cart
    description: Shopping Cart Api
  - name: user
    description: User management resource (User Management Api)
paths:
  /api/v1/auth/cache/store/{storeId}/clear:
    delete:
      tags:
      - cache
      summary: clearCache
      operationId: clearCacheUsingDELETE
      parameters:
      - name: cacheKey
        in: query
        description: cacheKey
        schema:
          type: string
      - name: storeId
        in: path
        description: storeId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/cart/{code}/checkout:
    post:
      tags:
      - order
      summary: checkout
      operationId: checkoutUsingPOST
      parameters:
      - name: ISO3Country
        in: query
        schema:
          type: string
      - name: ISO3Language
        in: query
        schema:
          type: string
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: country
        in: query
        schema:
          type: string
      - name: displayCountry
        in: query
        schema:
          type: string
      - name: displayLanguage
        in: query
        schema:
          type: string
      - name: displayName
        in: query
        schema:
          type: string
      - name: displayScript
        in: query
        schema:
          type: string
      - name: displayVariant
        in: query
        schema:
          type: string
      - name: language
        in: query
        schema:
          type: string
      - name: script
        in: query
        schema:
          type: string
      - name: unicodeLocaleAttributes
        in: query
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: unicodeLocaleKeys
        in: query
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: variant
        in: query
        schema:
          type: string
      requestBody:
        description: order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableOrderApi'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableOrderApi'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: order
  /api/v1/auth/cart/{code}/payment/init:
    post:
      tags:
      - order-payment
      summary: init
      operationId: initUsingPOST
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistablePayment'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableTransaction'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: payment
  /api/v1/auth/cart/{code}/shipping:
    get:
      tags:
      - order-shipping
      summary: shipping
      operationId: shippingUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShippingSummary'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/cart/{id}/total:
    get:
      tags:
      - order-total
      summary: payment
      operationId: paymentUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: quote
        in: query
        description: quote
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrderTotalSummary'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/customer/address:
    patch:
      tags:
      - customer
      summary: Updates a loged in customer address
      description: Requires authentication
      operationId: updateAuthUserAddressUsingPATCH
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
  /api/v1/auth/customer/refresh:
    get:
      tags:
      - authenticate-customer
      summary: refreshToken
      operationId: refreshTokenUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/customer:
    put:
      tags:
      - customer
      summary: Updates a loged in customer profile
      description: Requires authentication
      operationId: updateUsingPUT_1
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
  /api/v1/auth/orders:
    get:
      tags:
      - order
      summary: list
      operationId: listUsingGET_3
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
      - name: start
        in: query
        description: start
        schema:
          type: integer
          format: int32
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrderList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/orders/{id}:
    get:
      tags:
      - order
      summary: getOrder
      operationId: getOrderUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrder'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/product/{id}:
    put:
      tags:
      - product
      summary: Update product
      operationId: updateUsingPUT_7
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProduct'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProduct'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: product
    delete:
      tags:
      - product
      summary: delete
      operationId: deleteUsingDELETE_6
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/product/{productId}/category/{categoryId}:
    post:
      tags:
      - product
      summary: addProductToCategory
      operationId: addProductToCategoryUsingPOST
      parameters:
      - name: categoryId
        in: path
        description: categoryId
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProduct'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
    delete:
      tags:
      - product
      summary: removeProductFromCategory
      operationId: removeProductFromCategoryUsingDELETE
      parameters:
      - name: categoryId
        in: path
        description: categoryId
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProduct'
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/products:
    post:
      tags:
      - product
      summary: create
      operationId: createUsingPOST_7
      requestBody:
        description: product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProduct'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProduct'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: product
  /api/v1/auth/products/images/{id}:
    delete:
      tags:
      - product-image
      summary: deleteImage
      operationId: deleteImageUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/products/{id}/images:
    post:
      tags:
      - product-image
      summary: uploadImages
      operationId: uploadImagesUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file[]
              properties:
                file[]:
                  type: array
                  description: file[]
                  items:
                    type: file
                    format: binary
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/products/{id}/reviews:
    post:
      tags:
      - product-review
      summary: create
      operationId: createUsingPOST_10
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductReview'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProductReview'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: review
  /api/v1/auth/products/{id}/reviews/{reviewId}:
    put:
      tags:
      - product-review
      summary: update
      operationId: updateUsingPUT_10
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: reviewId
        in: path
        description: reviewId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductReview'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProductReview'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: review
    delete:
      tags:
      - product-review
      summary: delete
      operationId: deleteUsingDELETE_9
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: reviewId
        in: path
        description: reviewId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/auth/refresh:
    get:
      tags:
      - authenticate-user
      summary: refreshAndGetAuthenticationToken
      operationId: refreshAndGetAuthenticationTokenUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/cart:
    post:
      tags:
      - shopping-cart
      summary: Add product to shopping cart when no cart exists, this will create
        a new cart id
      description: No customer ID in scope. Add to cart for non authenticated users,
        as simple as {"product":1232,"quantity":1}
      operationId: addToCartUsingPOST
      requestBody:
        description: shoppingCartItem
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableShoppingCartItem'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShoppingCart'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: shoppingCartItem
  /api/v1/cart/{code}:
    get:
      tags:
      - shopping-cart
      summary: Get a chopping cart by code
      operationId: getByCodeUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShoppingCart'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    put:
      tags:
      - shopping-cart
      summary: Add to an existing shopping cart or modify an item quantity
      description: No customer ID in scope. Modify cart for non authenticated users,
        as simple as {"product":1232,"quantity":0} for instance will remove item 1234
        from cart
      operationId: modifyCartUsingPUT
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: shoppingCartItem
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableShoppingCartItem'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShoppingCart'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: shoppingCartItem
  /api/v1/cart/{code}/checkout:
    post:
      tags:
      - order
      summary: checkout
      operationId: checkoutUsingPOST_1
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableAnonymousOrderApi'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableOrderApi'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: order
  /api/v1/cart/{code}/payment/init:
    post:
      tags:
      - order-payment
      summary: init
      operationId: initUsingPOST_1
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: payment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistablePayment'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableTransaction'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: payment
  /api/v1/cart/{code}/product/{id}:
    delete:
      tags:
      - shopping-cart
      summary: Remove a product from a specific cart
      operationId: deleteCartItemUsingDELETE
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/cart/{id}/shipping:
    post:
      tags:
      - order-shipping
      summary: shipping
      operationId: shippingUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressLocation'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShippingSummary'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: address
  /api/v1/cart/{id}/total:
    get:
      tags:
      - order-total
      summary: calculatePayment
      operationId: calculatePaymentUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: quote
        in: query
        description: quote
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrderTotalSummary'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/category:
    get:
      tags:
      - category
      summary: Get category hierarchy from root. Supports filtering FEATURED_CATEGORIES
        and VISIBLE ONLY by adding ?filter=[featured] or ?filter=[visible] or ? filter=[featured,visible
      description: Does not return any product attached
      operationId: listUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: filter
        in: query
        description: filter
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: name
        in: query
        description: name
        schema:
          type: string
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCategoryList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/category/{id}:
    get:
      tags:
      - category
      summary: Get category list for an given Category id
      description: List current Category and child category
      operationId: getUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCategory'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/category/{id}/manufacturers:
    get:
      tags:
      - manufacturer
      summary: Get all manufacturers for all items in a given category
      operationId: manufacturerListUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/category/{id}/variants:
    get:
      tags:
      - product-variant
      summary: Get all variation for all items in a given category
      operationId: categoryVariantListUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/config:
    get:
      tags:
      - public-configs
      summary: Get public configuration for a given merchant store
      operationId: getConfigUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configs'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/contact:
    post:
      tags:
      - contact
      summary: Sends an email contact us to store owner
      operationId: contactUsingPOST
      requestBody:
        description: contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactForm'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: contact
  /api/v1/content/boxes:
    get:
      tags:
      - content
      summary: Get pages summary created for a given MerchantStore
      operationId: boxesUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/boxes/{code}:
    get:
      tags:
      - content
      summary: Get box content by code for a code and a given MerchantStore
      operationId: getBoxByCodeUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/folder:
    get:
      tags:
      - content
      summary: folder
      operationId: folderUsingGET
      parameters:
      - name: path
        in: query
        description: path
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentFolder'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/images:
    get:
      tags:
      - content
      summary: Get store content images
      operationId: imagesUsingGET
      parameters:
      - name: path
        in: query
        description: path
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentFolder'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/pages:
    get:
      tags:
      - content
      summary: Get page names created for a given MerchantStore
      operationId: getContentPagesUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/pages/name/{name}:
    get:
      tags:
      - content
      summary: Get page content by code for a given MerchantStore
      operationId: pageByNameUsingGET
      parameters:
      - name: name
        in: path
        description: name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableContentPage'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/pages/{code}:
    get:
      tags:
      - content
      summary: Get page content by code for a given MerchantStore
      operationId: pageUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableContentPage'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/content/summary:
    get:
      tags:
      - content
      summary: Get pages summary created for a given MerchantStore. Content summary
        is a content bux having code summary.
      operationId: pagesSummaryUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/country:
    get:
      tags:
      - references
      summary: getCountry
      operationId: getCountryUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableCountry'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/currency:
    get:
      tags:
      - references
      summary: getCurrency
      operationId: getCurrencyUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Currency'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/customer/login:
    post:
      tags:
      - authenticate-customer
      summary: Authenticates a customer to the application
      description: Customer can authenticate after registration, request is {"username":"admin","password":"password"}
      operationId: authenticateUsingPOST
      requestBody:
        description: authenticationRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: authenticationRequest
  /api/v1/customer/password:
    put:
      tags:
      - authenticate-customer
      summary: Sends a request to reset password
      description: Password reset request is {"username":"test@email.com"}
      operationId: changePasswordUsingPUT
      requestBody:
        description: passwordRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEntity'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: passwordRequest
  /api/v1/customer/password/reset:
    post:
      tags:
      - authenticate-customer
      summary: Change customer password
      description: Change password request object is {"username":"test@email.com"}
      operationId: resetPasswordUsingPOST
      requestBody:
        description: authenticationRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEntity'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: authenticationRequest
  /api/v1/customer/register:
    post:
      tags:
      - authenticate-customer
      summary: Registers a customer to the application
      description: Used as self-served operation
      operationId: registerUsingPOST
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
  /api/v1/customers/{id}/cart:
    get:
      tags:
      - shopping-cart
      summary: Get a chopping cart by id
      operationId: getUsingGET_9
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShoppingCart'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    post:
      tags:
      - shopping-cart
      summary: Add product to a specific customer shopping cart
      operationId: addToCartUsingPOST_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: shoppingCartItem
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableShoppingCartItem'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableShoppingCart'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: shoppingCartItem
  /api/v1/customers/{id}/reviews:
    get:
      tags:
      - customer-review
      summary: getAll
      operationId: getAllUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableCustomerReview'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/languages:
    get:
      tags:
      - references
      summary: getLanguages
      operationId: getLanguagesUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Language'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/manufacturer/{id}:
    delete:
      tags:
      - manufacturer
      summary: delete
      operationId: deleteUsingDELETE_4
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/manufacturers/:
    get:
      tags:
      - manufacturer
      summary: List manufacturers by store
      description: This request supports paging or not. Paging supports page number
        and request count
      operationId: listUsingGET_1
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: name
        in: query
        description: name
        schema:
          type: string
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableManufacturerList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/manufacturers/{id}:
    get:
      tags:
      - manufacturer
      summary: get
      operationId: getUsingGET_2
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableManufacturer'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/measures:
    get:
      tags:
      - references
      summary: measures
      operationId: measuresUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SizeReferences'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/newsletter:
    post:
      tags:
      - customer-newsletter
      summary: Creates a newsletter optin
      operationId: createUsingPOST_2
      requestBody:
        description: optin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCustomerOptin'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: optin
  /api/v1/newsletter/{email}:
    put:
      tags:
      - customer-newsletter
      summary: Updates a customer
      description: Requires administration access
      operationId: updateUsingPUT_3
      parameters:
      - name: email
        in: path
        description: email
        required: true
        schema:
          type: string
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
    delete:
      tags:
      - customer-newsletter
      summary: Deletes a customer
      description: Requires administration access
      operationId: deleteUsingDELETE_2
      parameters:
      - name: email
        in: path
        description: email
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/catalog:
    post:
      tags:
      - catalog
      summary: Create catalog
      operationId: createCatalogUsingPOST
      requestBody:
        description: catalog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCatalog'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCatalog'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: catalog
  /api/v1/private/catalog/unique:
    get:
      tags:
      - catalog
      summary: Check if catalog code already exists
      operationId: existsUsingGET
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/catalog/{id}:
    get:
      tags:
      - catalog
      summary: Get catalog
      operationId: getCatalogUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCatalog'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    post:
      tags:
      - catalog
      summary: Add catalog entry to catalog
      operationId: addCatalogEntryUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: catalogEntry
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCatalogEntry'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCatalogEntry'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: catalogEntry
    delete:
      tags:
      - catalog
      summary: Deletes a catalog
      operationId: deleteCatalogUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
    patch:
      tags:
      - catalog
      summary: Update catalog
      operationId: updateCatalogUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: catalog
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCatalog'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: catalog
  /api/v1/private/catalog/{id}/entry:
    get:
      tags:
      - catalog
      summary: Get catalog entry by catalog
      operationId: getCatalogEntryUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCatalogEntryList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/catalog/{id}/entry/{entryId}:
    delete:
      tags:
      - catalog
      summary: Remove catalog entry from catalog
      operationId: removeCatalogEntryUsingDELETE
      parameters:
      - name: entryId
        in: path
        description: entryId
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/catalogs:
    get:
      tags:
      - catalog
      summary: Get catalogs by merchant
      operationId: getCatalogsUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCatalogList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/category:
    post:
      tags:
      - category
      summary: create
      operationId: createUsingPOST
      requestBody:
        description: category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCategory'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableCategory'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: category
  /api/v1/private/category/unique:
    get:
      tags:
      - category
      summary: Check if category code already exists
      operationId: existsUsingGET_1
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/category/{id}:
    put:
      tags:
      - category
      summary: update
      operationId: updateUsingPUT
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCategory'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableCategory'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: category
    delete:
      tags:
      - category
      summary: delete
      operationId: deleteUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/category/{id}/move/{parent}:
    put:
      tags:
      - category
      summary: Move a category under another category
      description: Move category {id} under category {parent}
      operationId: moveUsingPUT
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: parent
        in: path
        description: parent
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/category/{id}/visible:
    patch:
      tags:
      - category
      summary: updateVisible
      operationId: updateVisibleUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCategory'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: category
  /api/v1/private/content:
    post:
      tags:
      - content
      summary: Create content (page or box)
      description: content type is by default BOX, when creating a page specify contentType:PAGE
      operationId: savePageUsingPOST
      requestBody:
        description: page
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableContentEntity'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: page
  /api/v1/private/content/:
    delete:
      tags:
      - content
      summary: Deletes a file from CMS
      description: Delete a file from server
      operationId: deleteFileUsingDELETE
      parameters:
      - name: contentType
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/content/any/{code}:
    get:
      tags:
      - content
      summary: Get page content by code for a given MerchantStore
      operationId: contentUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableContentPage'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/content/{id}:
    put:
      tags:
      - content
      summary: Update content page
      description: Updates a content page
      operationId: updatePageUsingPUT
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: page
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableContentEntity'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: page
    delete:
      tags:
      - content
      summary: Deletes a content from CMS
      description: Delete a content box or page
      operationId: deleteContentUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/contents/any:
    get:
      tags:
      - content
      summary: Get contents (page and boc) for a given MerchantStore
      operationId: contentsUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableContentPage'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/customer:
    post:
      tags:
      - customer
      summary: Creates a customer
      description: Requires administration access
      operationId: createUsingPOST_1
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
  /api/v1/private/customer/profile:
    get:
      tags:
      - customer
      summary: getAuthUser
      operationId: getAuthUserUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCustomer'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/customer/{id}:
    get:
      tags:
      - customer
      summary: get
      operationId: getUsingGET_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCustomer'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    put:
      tags:
      - customer
      summary: Updates a customer
      description: Requires administration access
      operationId: updateUsingPUT_2
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
    delete:
      tags:
      - customer
      summary: Deletes a customer
      description: Requires administration access
      operationId: deleteUsingDELETE_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/customer/{id}/address:
    patch:
      tags:
      - customer
      summary: Updates a customer
      description: Requires administration access
      operationId: updateAddressUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: customer
  /api/v1/private/customers:
    get:
      tags:
      - customer
      summary: getFilteredCustomers
      operationId: getFilteredCustomersUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
      - name: start
        in: query
        description: start
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableCustomerList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/customers/{id}/reviews:
    post:
      tags:
      - customer-review
      summary: create
      operationId: createUsingPOST_3
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCustomerReview'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableCustomerReview'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: review
    delete:
      tags:
      - customer-review
      summary: delete
      operationId: deleteUsingDELETE_3
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: reviewId
        in: path
        description: reviewId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
    put:
      tags:
      - customer-review
      summary: update
      operationId: updateUsingPUT_4
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: reviewId
        in: path
        description: reviewId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableCustomerReview'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableCustomerReview'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: review
  /api/v1/private/file:
    post:
      tags:
      - content
      summary: upload
      operationId: uploadUsingPOST
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: file
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/files:
    post:
      tags:
      - content
      summary: uploadMultipleFiles
      operationId: uploadMultipleFilesUsingPOST
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file[]
              properties:
                file[]:
                  type: array
                  description: file[]
                  items:
                    type: file
                    format: binary
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/login:
    post:
      tags:
      - authenticate-user
      summary: authenticate
      operationId: authenticateUsingPOST_1
      requestBody:
        description: authenticationRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: authenticationRequest
  /api/v1/private/manufacturer:
    post:
      tags:
      - manufacturer
      summary: create
      operationId: createUsingPOST_4
      requestBody:
        description: manufacturer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableManufacturer'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableManufacturer'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: manufacturer
  /api/v1/private/manufacturer/unique:
    get:
      tags:
      - manufacturer
      summary: Check if manufacturer code already exists
      operationId: existsUsingGET_2
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/manufacturer/{id}:
    put:
      tags:
      - manufacturer
      summary: update
      operationId: updateUsingPUT_5
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: manufacturer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableManufacturer'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: manufacturer
  /api/v1/private/marketplace/{store}:
    get:
      tags:
      - market-place
      summary: Get market place meta-data
      operationId: marketPlaceUsingGET
      parameters:
      - name: lang
        in: query
        description: lang
        schema:
          type: string
      - name: store
        in: path
        description: store
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMarketPlace'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/merchant/{code}/children:
    get:
      tags:
      - merchant-store
      summary: Get child stores
      operationId: childrenUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/merchant/{code}/stores:
    get:
      tags:
      - merchant-store
      summary: Get retailer child stores
      description: Merchant (retailer) can have multiple stores
      operationId: listUsingGET_2
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMerchantStore'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/optin:
    post:
      tags:
      - optin
      summary: Creates an optin event type definition
      operationId: createUsingPOST_6
      requestBody:
        description: optin
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableOptin'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOptin'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: optin
  /api/v1/private/orders:
    get:
      tags:
      - order
      summary: getOrders
      operationId: getOrdersUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 100
      - name: start
        in: query
        description: start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrderList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/orders/customers/{id}:
    get:
      tags:
      - order
      summary: list
      operationId: listUsingGET_4
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: start
        in: query
        description: start
        schema:
          type: integer
          format: int32
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrderList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/orders/payment/capturable:
    get:
      tags:
      - order-payment
      summary: listCapturableOrders
      operationId: listCapturableOrdersUsingGET
      parameters:
      - name: endDate
        in: query
        description: endDate
        schema:
          type: string
          format: date
      - name: startDate
        in: query
        description: startDate
        schema:
          type: string
          format: date
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableOrderList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/orders/{id}/capture:
    post:
      tags:
      - order-payment
      summary: caprurePayment
      operationId: caprurePaymentUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Created
          content: {}
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableTransaction'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product:
    post:
      tags:
      - product
      summary: create
      operationId: createUsingPOST_8
      requestBody:
        description: product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProduct'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProduct'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: product
  /api/v1/private/product/inventory:
    post:
      tags:
      - product-inventory
      summary: create
      operationId: createUsingPOST_9
      requestBody:
        description: inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableInventory'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableInventory'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: inventory
  /api/v1/private/product/inventory/{id}:
    delete:
      tags:
      - product-inventory
      summary: delete
      operationId: deleteUsingDELETE_8
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/option:
    post:
      tags:
      - product-option
      summary: createOption
      operationId: createOptionUsingPOST
      requestBody:
        description: option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductOptionEntity'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductOptionEntity'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: option
  /api/v1/private/product/option/unique:
    get:
      tags:
      - product-option
      summary: Check if option code already exists
      operationId: optionExistsUsingGET
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/option/value:
    post:
      tags:
      - product-option
      summary: createOptionValue
      operationId: createOptionValueUsingPOST
      requestBody:
        description: optionValue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductOptionValueEntity'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductOptionValueEntity'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: optionValue
  /api/v1/private/product/option/value/unique:
    get:
      tags:
      - product-option
      summary: Check if option value code already exists
      operationId: optionValueExistsUsingGET
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/option/value/{id}:
    get:
      tags:
      - product-option
      summary: getOptionValue
      operationId: getOptionValueUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductOptionValueEntity'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    put:
      tags:
      - product-option
      summary: updateOptionValue
      operationId: updateOptionValueUsingPUT
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: optionValue
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductOptionValueEntity'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: optionValue
    delete:
      tags:
      - product-option
      summary: deleteOptionValue
      operationId: deleteOptionValueUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/option/value/{id}/image:
    post:
      tags:
      - product-option
      summary: addOptionValueImage
      operationId: addOptionValueImageUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: file
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
    delete:
      tags:
      - product-option
      summary: removeOptionValueImage
      operationId: removeOptionValueImageUsingDELETE
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/option/{id}:
    get:
      tags:
      - product-option
      summary: getOption
      operationId: getOptionUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductOptionEntity'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/option/{optionId}:
    put:
      tags:
      - product-option
      summary: updateOption
      operationId: updateOptionUsingPUT
      parameters:
      - name: optionId
        in: path
        description: optionId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: option
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductOptionEntity'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: option
    delete:
      tags:
      - product-option
      summary: deleteOption
      operationId: deleteOptionUsingDELETE
      parameters:
      - name: optionId
        in: path
        description: optionId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/options:
    get:
      tags:
      - product-option
      summary: options
      operationId: optionsUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: name
        in: query
        description: name
        schema:
          type: string
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductOptionList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/options/values:
    get:
      tags:
      - product-option
      summary: optionsValues
      operationId: optionsValuesUsingGET
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: name
        in: query
        description: name
        schema:
          type: string
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductOptionValueList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/unique:
    get:
      tags:
      - product
      summary: Check if product code already exists
      operationId: existsUsingGET_4
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{id}:
    put:
      tags:
      - product
      summary: Update product
      operationId: updateUsingPUT_8
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProduct'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProduct'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: product
    delete:
      tags:
      - product
      summary: delete
      operationId: deleteUsingDELETE_7
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
    patch:
      tags:
      - product
      summary: Update product inventory
      description: Updates product inventory
      operationId: updateUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LightPersistableProduct'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: product
  /api/v1/private/product/{id}/attribute:
    post:
      tags:
      - product-option
      summary: createAttribute
      operationId: createAttributeUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductAttribute'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductAttributeEntity'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: attribute
  /api/v1/private/product/{id}/attribute/{attributeId}:
    get:
      tags:
      - product-option
      summary: Get product attributes
      operationId: getAttributeUsingGET
      parameters:
      - name: attributeId
        in: path
        description: attributeId
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    put:
      tags:
      - product-option
      summary: updateAttribute
      operationId: updateAttributeUsingPUT
      parameters:
      - name: attributeId
        in: path
        description: attributeId
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductAttribute'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: attribute
    delete:
      tags:
      - product-option
      summary: deleteAttribute
      operationId: deleteAttributeUsingDELETE
      parameters:
      - name: attributeId
        in: path
        description: attributeId
        required: true
        schema:
          type: integer
          format: int64
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{id}/attributes:
    get:
      tags:
      - product-option
      summary: Get product attributes
      operationId: attributesUsingGET
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductAttributeList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{id}/inventory:
    get:
      tags:
      - product-inventory
      summary: get
      operationId: getUsingGET_8
      parameters:
      - name: child
        in: query
        description: child
        schema:
          type: string
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableInventoryList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{id}/inventory/store/{code}:
    get:
      tags:
      - product-inventory
      summary: get
      operationId: getUsingGET_6
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableInventory'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{id}/inventory/{inventoryId}:
    get:
      tags:
      - product-inventory
      summary: get
      operationId: getUsingGET_7
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: inventoryId
        in: path
        description: inventoryId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableInventory'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{productId}/category/{categoryId}:
    post:
      tags:
      - product
      summary: addProductToCategory
      operationId: addProductToCategoryUsingPOST_1
      parameters:
      - name: categoryId
        in: path
        description: categoryId
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProduct'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
    delete:
      tags:
      - product
      summary: removeProductFromCategory
      operationId: removeProductFromCategoryUsingDELETE_1
      parameters:
      - name: categoryId
        in: path
        description: categoryId
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProduct'
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/product/{productId}/inventory/{id}:
    put:
      tags:
      - product-inventory
      summary: update
      operationId: updateUsingPUT_9
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: inventory
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableInventory'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: inventory
  /api/v1/private/products/group:
    post:
      tags:
      - product-group
      summary: Create product group
      operationId: creteGroupUsingPOST
      requestBody:
        description: group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductGroup'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroup'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: group
  /api/v1/private/products/group/{code}:
    patch:
      tags:
      - product-group
      summary: Update product group visible flag
      operationId: updateGroupUsingPATCH
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: group
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductGroup'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGroup'
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: group
  /api/v1/private/products/groups:
    get:
      tags:
      - product-group
      summary: Get products groups for a given merchant
      operationId: listUsingGET_5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/products/images/{id}:
    delete:
      tags:
      - product-image
      summary: deleteImage
      operationId: deleteImageUsingDELETE_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/products/{id}/images:
    post:
      tags:
      - product-image
      summary: uploadImages
      operationId: uploadImagesUsingPOST_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file[]
              properties:
                file[]:
                  type: array
                  description: file[]
                  items:
                    type: file
                    format: binary
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/products/{id}/reviews:
    post:
      tags:
      - product-review
      summary: create
      operationId: createUsingPOST_11
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductReview'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProductReview'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: review
  /api/v1/private/products/{id}/reviews/{reviewId}:
    put:
      tags:
      - product-review
      summary: update
      operationId: updateUsingPUT_11
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: reviewId
        in: path
        description: reviewId
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableProductReview'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistableProductReview'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: review
    delete:
      tags:
      - product-review
      summary: delete
      operationId: deleteUsingDELETE_10
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: reviewId
        in: path
        description: reviewId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/products/{productId}/group/{code}:
    post:
      tags:
      - product-group
      summary: addProductToGroup
      operationId: addProductToGroupUsingPOST
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
    delete:
      tags:
      - product-group
      summary: removeProductFromGroup
      operationId: removeProductFromGroupUsingDELETE
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: productId
        in: path
        description: productId
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductList'
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/store:
    post:
      tags:
      - merchant-store
      summary: Creates a new store
      operationId: createUsingPOST_5
      requestBody:
        description: store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableMerchantStore'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMerchantStore'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: store
  /api/v1/private/store/unique:
    get:
      tags:
      - merchant-store
      summary: Check if store code already exists
      operationId: existsUsingGET_3
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/store/{code}:
    put:
      tags:
      - merchant-store
      summary: Updates a store
      operationId: updateUsingPUT_6
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableMerchantStore'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMerchantStore'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: store
    delete:
      tags:
      - merchant-store
      summary: Deletes a store
      operationId: deleteUsingDELETE_5
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/store/{code}/marketing:
    get:
      tags:
      - merchant-store
      summary: Get store branding and marketing details
      operationId: getStoreMarketingUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableBrand'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    post:
      tags:
      - merchant-store
      summary: Create or save store branding and marketing details
      operationId: saveStoreMarketingUsingPOST
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        description: brand
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableBrand'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableBrand'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: brand
  /api/v1/private/store/{code}/marketing/logo:
    post:
      tags:
      - merchant-store
      summary: Add store logo
      operationId: addLogoUsingPOST
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: file
                  format: binary
        required: true
      responses:
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
    delete:
      tags:
      - merchant-store
      summary: Delete store logo
      operationId: deleteStoreLogoUsingDELETE
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/stores:
    get:
      tags:
      - merchant-store
      summary: Get list of stores. Returns all retailers and stores. If superadmin
        everything is returned, else only retailer and child stores.
      operationId: getUsingGET_3
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 10
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMerchantStore'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/user/:
    post:
      tags:
      - user
      summary: Creates a new user
      operationId: createUsingPOST_12
      requestBody:
        description: user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableUser'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableUser'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: user
  /api/v1/private/user/profile:
    get:
      tags:
      - user
      summary: getAuthUser
      operationId: getAuthUserUsingGET_1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableUser'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/user/unique:
    post:
      tags:
      - user
      summary: Check if username already exists
      operationId: existsUsingPOST
      requestBody:
        description: userName
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniqueEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExists'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: userName
  /api/v1/private/user/{id}:
    put:
      tags:
      - user
      summary: Updates a user
      operationId: updateUsingPUT_12
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableUser'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableUser'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: user
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUsingDELETE_11
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/user/{id}/enabled:
    patch:
      tags:
      - user
      summary: updateEnabled
      operationId: updateEnabledUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistableUser'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: user
  /api/v1/private/user/{id}/password:
    patch:
      tags:
      - user
      summary: Updates a user password
      operationId: passwordUsingPATCH
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPassword'
        required: true
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: password
  /api/v1/private/users:
    get:
      tags:
      - user
      summary: Get list of user
      operationId: listUsingGET_6
      parameters:
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
          default: 20
      - name: page
        in: query
        description: page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableUserList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/private/users/{id}:
    get:
      tags:
      - user
      summary: Get a specific user profile by user id
      operationId: getUsingGET_10
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableUser'
        "400":
          description: Error while getting User
          content: {}
        "401":
          description: Login required
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/products:
    get:
      tags:
      - product
      summary: getFiltered
      operationId: getFilteredUsingGET
      parameters:
      - name: category
        in: query
        description: category
        schema:
          type: integer
          format: int64
      - name: count
        in: query
        description: count
        schema:
          type: integer
          format: int32
      - name: lang
        in: query
        schema:
          type: string
          default: en
      - name: manufacturer
        in: query
        description: manufacturer
        schema:
          type: integer
          format: int64
      - name: owner
        in: query
        description: owner
        schema:
          type: integer
          format: int64
      - name: start
        in: query
        description: start
        schema:
          type: integer
          format: int32
      - name: status
        in: query
        description: status
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/products/group/{code}:
    get:
      tags:
      - product-group
      summary: Get products by group code
      operationId: getProductItemsByGroupUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductList'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
    delete:
      tags:
      - product-group
      summary: Delete product group by group code
      operationId: deleteGroupUsingDELETE
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content: {}
        "204":
          description: No Content
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
      deprecated: false
      security:
      - JWT: []
  /api/v1/products/types:
    get:
      tags:
      - product-type
      summary: Get product types list
      operationId: getTypesUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/products/{id}:
    get:
      tags:
      - product
      summary: get
      operationId: getUsingGET_5
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      - name: lang
        in: query
        schema:
          type: string
          default: en
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProduct'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/products/{id}/related:
    get:
      tags:
      - product-relationship
      summary: Get product related items. This is used for doing cross-sell and up-sell
        functionality on a product details page
      operationId: getAllUsingGET_1
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/products/{id}/reviews:
    get:
      tags:
      - product-review
      summary: getAll
      operationId: getAllUsingGET_2
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableProductReview'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/products/{id}/variant:
    post:
      tags:
      - product-variant
      summary: Get product price variation based on selected options
      operationId: calculateVariantUsingPOST
      parameters:
      - name: id
        in: path
        description: id
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadableSelectedProductVariant'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableProductPrice'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: options
  /api/v1/search:
    post:
      tags:
      - search
      summary: search
      operationId: searchUsingPOST
      requestBody:
        description: searchRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchProductRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchProductList'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: searchRequest
  /api/v1/search/autocomplete:
    post:
      tags:
      - search
      summary: autocomplete
      operationId: autocompleteUsingPOST
      requestBody:
        description: searchRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchProductRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueList'
        "201":
          description: Created
          content: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "404":
          description: Not Found
          content: {}
      deprecated: false
      security:
      - JWT: []
      x-codegen-request-body-name: searchRequest
  /api/v1/sec/private/groups:
    get:
      tags:
      - security
      summary: groups
      operationId: groupsUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableGroup'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/sec/private/permissions:
    get:
      tags:
      - security
      summary: permissions
      operationId: permissionsUsingGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadablePermission'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/sec/private/{group}/permissions:
    get:
      tags:
      - security
      summary: Get permissions by group
      operationId: listPermissionsUsingGET
      parameters:
      - name: group
        in: path
        description: group
        required: true
        schema:
          type: string
      - name: store
        in: query
        description: store
        schema:
          type: string
          default: DEFAULT
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties: {}
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/store/{code}:
    get:
      tags:
      - merchant-store
      summary: Get merchant store
      operationId: storeUsingGET
      parameters:
      - name: code
        in: path
        description: code
        required: true
        schema:
          type: string
      - name: lang
        in: query
        description: lang
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMerchantStore'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/stores:
    get:
      tags:
      - merchant-store
      summary: Get list of store names. Returns all retailers and stores
      operationId: getUsingGET_4
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadableMerchantStore'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
  /api/v1/zones:
    get:
      tags:
      - references
      summary: getZones
      operationId: getZonesUsingGET
      parameters:
      - name: code
        in: query
        description: code
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadableZone'
        "401":
          description: Unauthorized
          content: {}
        "403":
          description: Forbidden
          content: {}
        "500":
          description: 500 message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      deprecated: false
      security:
      - JWT: []
components:
  schemas:
    Address:
      title: Address
      type: object
      properties:
        address:
          type: string
          description: Customer billing address
        billingAddress:
          type: boolean
        bilstateOther:
          type: string
        city:
          type: string
          description: Customer billing city
        company:
          type: string
        country:
          type: string
          description: Customer billing country code (2 letter code US, CA, UK, IT,
            IN, CN...)
        countryCode:
          type: string
        firstName:
          type: string
          description: Customer billing first name
        lastName:
          type: string
          description: Customer billing last name
        latitude:
          type: string
        longitude:
          type: string
        phone:
          type: string
        postalCode:
          type: string
        stateProvince:
          type: string
          description: 'Customer billing state / province (if no 2 letter codes, example:
            North estate)'
        zone:
          type: string
          description: Customer billing state / province (2 letter code CA, ON...)
    AddressLocation:
      title: AddressLocation
      type: object
      properties:
        countryCode:
          type: string
        postalCode:
          type: string
    AuthenticationRequest:
      title: AuthenticationRequest
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    AuthenticationResponse:
      title: AuthenticationResponse
      type: object
      properties:
        id:
          type: integer
          format: int64
        token:
          type: string
    Category:
      title: Category
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
    CategoryDescription:
      title: CategoryDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    Configs:
      title: Configs
      type: object
      properties:
        allowOnlinePurchase:
          type: boolean
        displayContactUs:
          type: boolean
        displaySearchBox:
          type: boolean
        displayShipping:
          type: boolean
        facebook:
          type: string
        ga:
          type: string
        instagram:
          type: string
        pinterest:
          type: string
    ContactForm:
      title: ContactForm
      type: object
      properties:
        comment:
          type: string
        email:
          type: string
        name:
          type: string
        subject:
          type: string
    Content:
      title: Content
      type: object
      properties:
        contentType:
          type: string
        name:
          type: string
    ContentDescriptionEntity:
      title: ContentDescriptionEntity
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    ContentFolder:
      title: ContentFolder
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Content'
        path:
          type: string
    CreditCard:
      title: CreditCard
      type: object
      properties:
        cardType:
          type: string
          enum:
          - AMEX
          - VISA
          - MASTERCARD
          - DINERS
          - DISCOVERY
        ccCvv:
          type: string
        ccExpires:
          type: string
        ccNumber:
          type: string
        ccOwner:
          type: string
    Currency:
      title: Currency
      type: object
      properties:
        code:
          type: string
        currency:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        new:
          type: boolean
        supported:
          type: boolean
        symbol:
          type: string
    Customer:
      title: Customer
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PersistableCustomerAttribute'
        billing:
          $ref: '#/components/schemas/Address'
        delivery:
          $ref: '#/components/schemas/Address'
        emailAddress:
          type: string
          description: Customer email address. Required for registration
        firstName:
          type: string
        gender:
          type: string
          description: Customer gender M | F
        groups:
          type: array
          items:
            $ref: '#/components/schemas/PersistableGroup'
        id:
          type: integer
          format: int64
        language:
          type: string
          description: 2 letters language code en | fr | ...
        lastName:
          type: string
        password:
          type: string
          description: Customer password
        provider:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        storeCode:
          type: string
        userName:
          type: string
      description: Customer model object
    CustomerOption:
      title: CustomerOption
      type: object
      properties:
        id:
          type: integer
          format: int64
    CustomerOptionDescription:
      title: CustomerOptionDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    CustomerOptionValue:
      title: CustomerOptionValue
      type: object
      properties:
        id:
          type: integer
          format: int64
    CustomerOptionValueDescription:
      title: CustomerOptionValueDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    EntityExists:
      title: EntityExists
      type: object
      properties:
        exists:
          type: boolean
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    File:
      title: File
      type: object
      properties:
        absolute:
          type: boolean
        absoluteFile:
          $ref: '#/components/schemas/File'
        absolutePath:
          type: string
        canonicalFile:
          $ref: '#/components/schemas/File'
        canonicalPath:
          type: string
        directory:
          type: boolean
        executable:
          type: boolean
        file:
          type: boolean
        freeSpace:
          type: integer
          format: int64
        hidden:
          type: boolean
        lastModified:
          type: integer
          format: int64
        name:
          type: string
        parent:
          type: string
        parentFile:
          $ref: '#/components/schemas/File'
        path:
          type: string
        readable:
          type: boolean
        totalSpace:
          type: integer
          format: int64
        usableSpace:
          type: integer
          format: int64
        writable:
          type: boolean
    InputStream:
      title: InputStream
      type: object
    Language:
      title: Language
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int32
        new:
          type: boolean
    LightPersistableProduct:
      title: LightPersistableProduct
      type: object
      properties:
        available:
          type: boolean
        price:
          type: string
        quantity:
          type: integer
          format: int32
    List:
      title: List
      type: object
    ManufacturerDescription:
      title: ManufacturerDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    MerchantConfigEntity:
      title: MerchantConfigEntity
      type: object
      properties:
        active:
          type: boolean
        id:
          type: integer
          format: int64
        key:
          type: string
        type:
          type: string
          enum:
          - INTEGRATION
          - SHOP
          - CONFIG
          - SOCIAL
        value:
          type: string
    OrderAttribute:
      title: OrderAttribute
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    OrderTotal:
      title: OrderTotal
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
        module:
          type: string
        order:
          type: integer
          format: int32
        text:
          type: string
        title:
          type: string
        value:
          type: number
    PasswordRequest:
      title: PasswordRequest
      type: object
      properties:
        current:
          type: string
        password:
          type: string
        repeatPassword:
          type: string
        username:
          type: string
    PersistableAddress:
      title: PersistableAddress
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
        stateProvince:
          type: string
    PersistableAnonymousOrderApi:
      title: PersistableAnonymousOrderApi
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        comments:
          type: string
        currency:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        customerAgreement:
          type: boolean
        id:
          type: integer
          format: int64
        payment:
          $ref: '#/components/schemas/PersistablePayment'
        shippingQuote:
          type: integer
          format: int64
    PersistableBrand:
      title: PersistableBrand
      type: object
      properties:
        socialNetworks:
          type: array
          items:
            $ref: '#/components/schemas/MerchantConfigEntity'
    PersistableCatalog:
      title: PersistableCatalog
      type: object
      properties:
        code:
          type: string
        defaultCatalog:
          type: boolean
        id:
          type: integer
          format: int64
        visible:
          type: boolean
    PersistableCatalogEntry:
      title: PersistableCatalogEntry
      type: object
      properties:
        catalog:
          type: string
        categoryCode:
          type: string
        id:
          type: integer
          format: int64
        productCode:
          type: string
        visible:
          type: boolean
    PersistableCategory:
      title: PersistableCategory
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/PersistableCategory'
        code:
          type: string
        depth:
          type: integer
          format: int32
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/CategoryDescription'
        featured:
          type: boolean
        id:
          type: integer
          format: int64
        lineage:
          type: string
        parent:
          $ref: '#/components/schemas/Category'
        sortOrder:
          type: integer
          format: int32
        visible:
          type: boolean
    PersistableContentEntity:
      title: PersistableContentEntity
      type: object
      properties:
        code:
          type: string
        contentType:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ContentDescriptionEntity'
        displayedInMenu:
          type: boolean
        id:
          type: integer
          format: int64
        visible:
          type: boolean
    PersistableCustomerAttribute:
      title: PersistableCustomerAttribute
      type: object
      properties:
        customerOption:
          $ref: '#/components/schemas/CustomerOption'
        customerOptionValue:
          $ref: '#/components/schemas/CustomerOptionValue'
        id:
          type: integer
          format: int64
        textValue:
          type: string
    PersistableCustomerOptin:
      title: PersistableCustomerOptin
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
    PersistableCustomerReview:
      title: PersistableCustomerReview
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        date:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        rating:
          type: number
          format: double
        reviewedCustomer:
          type: integer
          format: int64
    PersistableGroup:
      title: PersistableGroup
      type: object
      properties:
        name:
          type: string
    PersistableImage:
      title: PersistableImage
      type: object
      properties:
        bytes:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        contentType:
          type: string
        defaultImage:
          type: boolean
        files:
          type: array
          items:
            type: file
            format: binary
        id:
          type: integer
          format: int64
        imageType:
          type: integer
          format: int32
        imageUrl:
          type: string
        name:
          type: string
        path:
          type: string
    PersistableInventory:
      title: PersistableInventory
      type: object
      properties:
        available:
          type: boolean
        dateAvailable:
          type: string
        id:
          type: integer
          format: int64
        owner:
          type: string
        prices:
          type: array
          items:
            $ref: '#/components/schemas/PersistableProductPrice'
        productId:
          type: integer
          format: int64
        productQuantityOrderMax:
          type: integer
          format: int32
        productQuantityOrderMin:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        region:
          type: string
        regionVariant:
          type: string
        store:
          type: string
    PersistableManufacturer:
      title: PersistableManufacturer
      type: object
      properties:
        code:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ManufacturerDescription'
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
    PersistableMerchantStore:
      title: PersistableMerchantStore
      type: object
      properties:
        address:
          $ref: '#/components/schemas/PersistableAddress'
        code:
          type: string
        currency:
          type: string
        currencyFormatNational:
          type: boolean
        defaultLanguage:
          type: string
        dimension:
          type: string
          enum:
          - KG
          - LB
          - CM
          - IN
        email:
          type: string
        id:
          type: integer
          format: int32
        inBusinessSince:
          type: string
        name:
          type: string
        phone:
          type: string
        retailer:
          type: boolean
        retailerStore:
          type: string
        supportedLanguages:
          type: array
          items:
            type: string
        template:
          type: string
        useCache:
          type: boolean
        weight:
          type: string
          enum:
          - KG
          - LB
          - CM
          - IN
    PersistableOptin:
      title: PersistableOptin
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        endDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        optinType:
          type: string
        startDate:
          type: string
          format: date-time
        store:
          type: string
    PersistableOrderApi:
      title: PersistableOrderApi
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        comments:
          type: string
        currency:
          type: string
        customerAgreement:
          type: boolean
        id:
          type: integer
          format: int64
        payment:
          $ref: '#/components/schemas/PersistablePayment'
        shippingQuote:
          type: integer
          format: int64
    PersistablePayment:
      title: PersistablePayment
      type: object
      properties:
        amount:
          type: string
        paymentModule:
          type: string
        paymentToken:
          type: string
        paymentType:
          type: string
        transactionType:
          type: string
    PersistableProduct:
      title: PersistableProduct
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/PersistableProductAttribute'
        available:
          type: boolean
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        condition:
          type: string
          enum:
          - NEW
          - USED
        creationDate:
          type: string
        dateAvailable:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ProductDescription'
        id:
          type: integer
          format: int64
        images:
          type: array
          items:
            $ref: '#/components/schemas/PersistableImage'
        owner:
          $ref: '#/components/schemas/RentalOwner'
        preOrder:
          type: boolean
        price:
          type: number
        productIsFree:
          type: boolean
        productPrices:
          type: array
          items:
            $ref: '#/components/schemas/PersistableProductPrice'
        productShipeable:
          type: boolean
        productSpecifications:
          $ref: '#/components/schemas/ProductSpecification'
        productVirtual:
          type: boolean
        quantity:
          type: integer
          format: int32
        quantityOrderMaximum:
          type: integer
          format: int32
        quantityOrderMinimum:
          type: integer
          format: int32
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        refSku:
          type: string
        relatedProducts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedProduct'
        rentalDuration:
          type: integer
          format: int32
        rentalPeriod:
          type: integer
          format: int32
        rentalStatus:
          type: string
          enum:
          - RENTED
          - AVAILABLE
        sku:
          type: string
        sortOrder:
          type: integer
          format: int32
        type:
          type: string
        visible:
          type: boolean
    PersistableProductAttribute:
      title: PersistableProductAttribute
      type: object
      properties:
        attributeDefault:
          type: boolean
        attributeDisplayOnly:
          type: boolean
        id:
          type: integer
          format: int64
        option:
          $ref: '#/components/schemas/ProductOption'
        optionValue:
          $ref: '#/components/schemas/ProductOptionValue'
        productAttributePrice:
          type: number
        productAttributeWeight:
          type: number
        productId:
          type: integer
          format: int64
        sortOrder:
          type: integer
          format: int32
    PersistableProductOptionEntity:
      title: PersistableProductOptionEntity
      type: object
      properties:
        code:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionDescription'
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
        readOnly:
          type: boolean
        type:
          type: string
    PersistableProductOptionValueEntity:
      title: PersistableProductOptionValueEntity
      type: object
      properties:
        code:
          type: string
        defaultValue:
          type: boolean
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ProductOptionValueDescription'
        id:
          type: integer
          format: int64
        image:
          type: string
        order:
          type: integer
          format: int32
        sortOrder:
          type: integer
          format: int32
    PersistableProductPrice:
      title: PersistableProductPrice
      type: object
      properties:
        code:
          type: string
        defaultPrice:
          type: boolean
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ProductPriceDescription'
        discountEndDate:
          type: string
        discountStartDate:
          type: string
        discounted:
          type: boolean
        discountedPrice:
          type: number
        id:
          type: integer
          format: int64
        originalPrice:
          type: number
    PersistableProductReview:
      title: PersistableProductReview
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        date:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        productId:
          type: integer
          format: int64
        rating:
          type: number
          format: double
    PersistableShoppingCartItem:
      title: PersistableShoppingCartItem
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttribute'
        product:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
    PersistableUser:
      title: PersistableUser
      type: object
      properties:
        active:
          type: boolean
        defaultLanguage:
          type: string
        emailAddress:
          type: string
        firstName:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/PersistableGroup'
        id:
          type: integer
          format: int64
        lastName:
          type: string
        password:
          type: string
        store:
          type: string
        userName:
          type: string
    ProductAttribute:
      title: ProductAttribute
      type: object
      properties:
        id:
          type: integer
          format: int64
    ProductDescription:
      title: ProductDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    ProductGroup:
      title: ProductGroup
      type: object
      properties:
        active:
          type: boolean
        code:
          type: string
    ProductOption:
      title: ProductOption
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
        readOnly:
          type: boolean
        type:
          type: string
    ProductOptionDescription:
      title: ProductOptionDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    ProductOptionValue:
      title: ProductOptionValue
      type: object
      properties:
        code:
          type: string
        defaultValue:
          type: boolean
        id:
          type: integer
          format: int64
        image:
          type: string
        sortOrder:
          type: integer
          format: int32
    ProductOptionValueDescription:
      title: ProductOptionValueDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    ProductPriceDescription:
      title: ProductPriceDescription
      type: object
      properties:
        description:
          type: string
        friendlyUrl:
          type: string
        highlights:
          type: string
        id:
          type: integer
          format: int64
        keyWords:
          type: string
        language:
          type: string
        metaDescription:
          type: string
        name:
          type: string
        title:
          type: string
    ProductSpecification:
      title: ProductSpecification
      type: object
      properties:
        dimensionUnitOfMeasure:
          type: string
          enum:
          - cm
          - cu
          - ft
          - in
          - m
        height:
          type: number
        length:
          type: number
        manufacturer:
          type: string
        model:
          type: string
        weight:
          type: number
        weightUnitOfMeasure:
          type: string
          enum:
          - g
          - kg
          - l
          - lb
          - T
        width:
          type: number
    ReadableAddress:
      title: ReadableAddress
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
        stateProvince:
          type: string
    ReadableAudit:
      title: ReadableAudit
      type: object
      properties:
        created:
          type: string
        modified:
          type: string
        user:
          type: string
    ReadableBrand:
      title: ReadableBrand
      type: object
      properties:
        logo:
          $ref: '#/components/schemas/ReadableImage'
        socialNetworks:
          type: array
          items:
            $ref: '#/components/schemas/MerchantConfigEntity'
    ReadableCatalog:
      title: ReadableCatalog
      type: object
      properties:
        code:
          type: string
        creationDate:
          type: string
        defaultCatalog:
          type: boolean
        id:
          type: integer
          format: int64
        store:
          $ref: '#/components/schemas/ReadableMerchantStore'
        visible:
          type: boolean
    ReadableCatalogEntry:
      title: ReadableCatalogEntry
      type: object
      properties:
        catalog:
          type: string
        category:
          $ref: '#/components/schemas/ReadableCategory'
        creationDate:
          type: string
        id:
          type: integer
          format: int64
        product:
          $ref: '#/components/schemas/ReadableProduct'
        visible:
          type: boolean
    ReadableCatalogEntryList:
      title: ReadableCatalogEntryList
      type: object
      properties:
        catalogEntry:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCatalogEntry'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableCatalogList:
      title: ReadableCatalogList
      type: object
      properties:
        catalogs:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCatalog'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableCategory:
      title: ReadableCategory
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCategory'
        code:
          type: string
        depth:
          type: integer
          format: int32
        description:
          $ref: '#/components/schemas/CategoryDescription'
        featured:
          type: boolean
        id:
          type: integer
          format: int64
        lineage:
          type: string
        parent:
          $ref: '#/components/schemas/Category'
        productCount:
          type: integer
          format: int32
        sortOrder:
          type: integer
          format: int32
        store:
          type: string
        visible:
          type: boolean
    ReadableCategoryList:
      title: ReadableCategoryList
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCategory'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableContentBox:
      title: ReadableContentBox
      type: object
      properties:
        boxContent:
          type: string
        code:
          type: string
        contentType:
          type: string
        displayedInMenu:
          type: boolean
        id:
          type: integer
          format: int64
        image:
          type: string
        language:
          type: string
        metaDetails:
          type: string
        name:
          type: string
        pageContent:
          type: string
        path:
          type: string
        slug:
          type: string
        title:
          type: string
    ReadableContentEntity:
      title: ReadableContentEntity
      type: object
      properties:
        code:
          type: string
        contentType:
          type: string
        description:
          $ref: '#/components/schemas/ContentDescriptionEntity'
        displayedInMenu:
          type: boolean
        id:
          type: integer
          format: int64
        visible:
          type: boolean
    ReadableContentFull:
      title: ReadableContentFull
      type: object
      properties:
        code:
          type: string
        contentType:
          type: string
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/ContentDescriptionEntity'
        displayedInMenu:
          type: boolean
        id:
          type: integer
          format: int64
        visible:
          type: boolean
    ReadableContentPage:
      title: ReadableContentPage
      type: object
      properties:
        code:
          type: string
        contentType:
          type: string
        displayedInMenu:
          type: boolean
        id:
          type: integer
          format: int64
        language:
          type: string
        metaDetails:
          type: string
        name:
          type: string
        pageContent:
          type: string
        path:
          type: string
        slug:
          type: string
        title:
          type: string
    ReadableCountry:
      title: ReadableCountry
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
        supported:
          type: boolean
        zones:
          type: array
          items:
            $ref: '#/components/schemas/ReadableZone'
    ReadableCustomer:
      title: ReadableCustomer
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCustomerAttribute'
        billing:
          $ref: '#/components/schemas/Address'
        delivery:
          $ref: '#/components/schemas/Address'
        emailAddress:
          type: string
          description: Customer email address. Required for registration
        firstName:
          type: string
        gender:
          type: string
          description: Customer gender M | F
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ReadableGroup'
        id:
          type: integer
          format: int64
        language:
          type: string
          description: 2 letters language code en | fr | ...
        lastName:
          type: string
        provider:
          type: string
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        storeCode:
          type: string
        userName:
          type: string
    ReadableCustomerAttribute:
      title: ReadableCustomerAttribute
      type: object
      properties:
        customerOption:
          $ref: '#/components/schemas/ReadableCustomerOption'
        customerOptionValue:
          $ref: '#/components/schemas/ReadableCustomerOptionValue'
        id:
          type: integer
          format: int64
        textValue:
          type: string
    ReadableCustomerList:
      title: ReadableCustomerList
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCustomer'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableCustomerOption:
      title: ReadableCustomerOption
      type: object
      properties:
        code:
          type: string
        description:
          $ref: '#/components/schemas/CustomerOptionDescription'
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
        type:
          type: string
    ReadableCustomerOptionValue:
      title: ReadableCustomerOptionValue
      type: object
      properties:
        code:
          type: string
        description:
          $ref: '#/components/schemas/CustomerOptionValueDescription'
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
    ReadableCustomerReview:
      title: ReadableCustomerReview
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        date:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        rating:
          type: number
          format: double
        reviewedCustomer:
          $ref: '#/components/schemas/ReadableCustomer'
    ReadableGroup:
      title: ReadableGroup
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ReadableImage:
      title: ReadableImage
      type: object
      properties:
        defaultImage:
          type: boolean
        externalUrl:
          type: string
        id:
          type: integer
          format: int64
        imageName:
          type: string
        imageType:
          type: integer
          format: int32
        imageUrl:
          type: string
        videoUrl:
          type: string
    ReadableInventory:
      title: ReadableInventory
      type: object
      properties:
        available:
          type: boolean
        creationDate:
          type: string
        dateAvailable:
          type: string
        id:
          type: integer
          format: int64
        owner:
          type: string
        prices:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductPrice'
        productQuantityOrderMax:
          type: integer
          format: int32
        productQuantityOrderMin:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        region:
          type: string
        regionVariant:
          type: string
        store:
          $ref: '#/components/schemas/ReadableMerchantStore'
    ReadableInventoryList:
      title: ReadableInventoryList
      type: object
      properties:
        inventory:
          type: array
          items:
            $ref: '#/components/schemas/ReadableInventory'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableManufacturer:
      title: ReadableManufacturer
      type: object
      properties:
        code:
          type: string
        description:
          $ref: '#/components/schemas/ManufacturerDescription'
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
    ReadableManufacturerList:
      title: ReadableManufacturerList
      type: object
      properties:
        manufacturers:
          type: array
          items:
            $ref: '#/components/schemas/ReadableManufacturer'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableMarketPlace:
      title: ReadableMarketPlace
      type: object
      properties:
        id:
          type: integer
          format: int64
        store:
          $ref: '#/components/schemas/ReadableMerchantStore'
    ReadableMerchantStore:
      title: ReadableMerchantStore
      type: object
      properties:
        address:
          $ref: '#/components/schemas/ReadableAddress'
        code:
          type: string
        currency:
          type: string
        currencyFormatNational:
          type: boolean
        currentUserLanguage:
          type: string
        defaultLanguage:
          type: string
        dimension:
          type: string
          enum:
          - KG
          - LB
          - CM
          - IN
        email:
          type: string
        id:
          type: integer
          format: int32
        inBusinessSince:
          type: string
        logo:
          $ref: '#/components/schemas/ReadableImage'
        name:
          type: string
        parent:
          $ref: '#/components/schemas/ReadableMerchantStore'
        phone:
          type: string
        readableAudit:
          $ref: '#/components/schemas/ReadableAudit'
        retailer:
          type: boolean
        supportedLanguages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        template:
          type: string
        useCache:
          type: boolean
        weight:
          type: string
          enum:
          - KG
          - LB
          - CM
          - IN
    ReadableMerchantStoreList:
      title: ReadableMerchantStoreList
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReadableMerchantStore'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableOptin:
      title: ReadableOptin
      type: object
      properties:
        code:
          type: string
        description:
          type: string
        endDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        optinType:
          type: string
        startDate:
          type: string
          format: date-time
        store:
          type: string
    ReadableOrder:
      title: ReadableOrder
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/OrderAttribute'
        billing:
          $ref: '#/components/schemas/Address'
        comments:
          type: string
        confirmedAddress:
          type: boolean
        creditCard:
          $ref: '#/components/schemas/CreditCard'
        currency:
          type: string
        currencyModel:
          $ref: '#/components/schemas/Currency'
        customer:
          $ref: '#/components/schemas/ReadableCustomer'
        customerAgreed:
          type: boolean
        datePurchased:
          type: string
          format: date-time
        delivery:
          $ref: '#/components/schemas/Address'
        id:
          type: integer
          format: int64
        orderStatus:
          type: string
          enum:
          - ORDERED
          - PROCESSED
          - DELIVERED
          - REFUNDED
          - CANCELED
        paymentModule:
          type: string
        paymentType:
          type: string
          enum:
          - CREDITCARD
          - FREE
          - COD
          - MONEYORDER
          - PAYPAL
        previousOrderStatus:
          type: array
          items:
            type: string
            enum:
            - ORDERED
            - PROCESSED
            - DELIVERED
            - REFUNDED
            - CANCELED
        products:
          type: array
          items:
            $ref: '#/components/schemas/ReadableOrderProduct'
        shipping:
          $ref: '#/components/schemas/OrderTotal'
        shippingModule:
          type: string
        tax:
          $ref: '#/components/schemas/OrderTotal'
        total:
          $ref: '#/components/schemas/OrderTotal'
        totals:
          type: array
          items:
            $ref: '#/components/schemas/OrderTotal'
    ReadableOrderList:
      title: ReadableOrderList
      type: object
      properties:
        number:
          type: integer
          format: int32
        orders:
          type: array
          items:
            $ref: '#/components/schemas/ReadableOrder'
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        total:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
    ReadableOrderProduct:
      title: ReadableOrderProduct
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ReadableOrderProductAttribute'
        id:
          type: integer
          format: int64
        image:
          type: string
        orderedQuantity:
          type: integer
          format: int32
        price:
          type: string
        product:
          $ref: '#/components/schemas/ReadableProduct'
        productName:
          type: string
        sku:
          type: string
        subTotal:
          type: string
    ReadableOrderProductAttribute:
      title: ReadableOrderProductAttribute
      type: object
      properties:
        attributeName:
          type: string
        attributePrice:
          type: string
        attributeValue:
          type: string
        id:
          type: integer
          format: int64
    ReadableOrderTotal:
      title: ReadableOrderTotal
      type: object
      properties:
        code:
          type: string
        discounted:
          type: boolean
        id:
          type: integer
          format: int64
        module:
          type: string
        order:
          type: integer
          format: int32
        text:
          type: string
        title:
          type: string
        total:
          type: string
        value:
          type: number
    ReadableOrderTotalSummary:
      title: ReadableOrderTotalSummary
      type: object
      properties:
        subTotal:
          type: string
        taxTotal:
          type: string
        total:
          type: string
        totals:
          type: array
          items:
            $ref: '#/components/schemas/ReadableOrderTotal'
    ReadablePermission:
      title: ReadablePermission
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ReadableProduct:
      title: ReadableProduct
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductAttribute'
        available:
          type: boolean
        canBePurchased:
          type: boolean
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCategory'
        condition:
          type: string
          enum:
          - NEW
          - USED
        creationDate:
          type: string
        dateAvailable:
          type: string
        description:
          $ref: '#/components/schemas/ProductDescription'
        discounted:
          type: boolean
        finalPrice:
          type: string
        id:
          type: integer
          format: int64
        image:
          $ref: '#/components/schemas/ReadableImage'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ReadableImage'
        manufacturer:
          $ref: '#/components/schemas/ReadableManufacturer'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductOption'
        originalPrice:
          type: string
        owner:
          $ref: '#/components/schemas/RentalOwner'
        preOrder:
          type: boolean
        price:
          type: number
        productIsFree:
          type: boolean
        productShipeable:
          type: boolean
        productSpecifications:
          $ref: '#/components/schemas/ProductSpecification'
        productVirtual:
          type: boolean
        quantity:
          type: integer
          format: int32
        quantityOrderMaximum:
          type: integer
          format: int32
        quantityOrderMinimum:
          type: integer
          format: int32
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        refSku:
          type: string
        rentalDuration:
          type: integer
          format: int32
        rentalPeriod:
          type: integer
          format: int32
        rentalStatus:
          type: string
          enum:
          - RENTED
          - AVAILABLE
        sku:
          type: string
        sortOrder:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/ReadableProductType'
        visible:
          type: boolean
    ReadableProductAttribute:
      title: ReadableProductAttribute
      type: object
      properties:
        attributeDefault:
          type: boolean
        attributeDisplayOnly:
          type: boolean
        attributeValues:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductAttributeValue'
        code:
          type: string
        id:
          type: integer
          format: int64
        lang:
          type: string
        name:
          type: string
        sortOrder:
          type: integer
          format: int32
        type:
          type: string
    ReadableProductAttributeEntity:
      title: ReadableProductAttributeEntity
      type: object
      properties:
        attributeDefault:
          type: boolean
        attributeDisplayOnly:
          type: boolean
        id:
          type: integer
          format: int64
        option:
          $ref: '#/components/schemas/ReadableProductOptionEntity'
        optionValue:
          $ref: '#/components/schemas/ReadableProductOptionValueEntity'
        productAttributePrice:
          type: string
        productAttributeWeight:
          type: string
        sortOrder:
          type: integer
          format: int32
    ReadableProductAttributeList:
      title: ReadableProductAttributeList
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductAttributeEntity'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableProductAttributeValue:
      title: ReadableProductAttributeValue
      type: object
      properties:
        code:
          type: string
        defaultValue:
          type: boolean
        description:
          type: string
        id:
          type: integer
          format: int64
        image:
          type: string
        lang:
          type: string
        name:
          type: string
        sortOrder:
          type: integer
          format: int32
    ReadableProductList:
      title: ReadableProductList
      type: object
      properties:
        number:
          type: integer
          format: int32
        products:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProduct'
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableProductOption:
      title: ReadableProductOption
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
        lang:
          type: string
        name:
          type: string
        optionValues:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductOptionValueEntity'
        readOnly:
          type: boolean
        type:
          type: string
    ReadableProductOptionEntity:
      title: ReadableProductOptionEntity
      type: object
      properties:
        code:
          type: string
        description:
          $ref: '#/components/schemas/ProductOptionDescription'
        id:
          type: integer
          format: int64
        order:
          type: integer
          format: int32
        readOnly:
          type: boolean
        type:
          type: string
    ReadableProductOptionList:
      title: ReadableProductOptionList
      type: object
      properties:
        number:
          type: integer
          format: int32
        options:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductOptionEntity'
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableProductOptionValueEntity:
      title: ReadableProductOptionValueEntity
      type: object
      properties:
        code:
          type: string
        defaultValue:
          type: boolean
        description:
          $ref: '#/components/schemas/ProductOptionValueDescription'
        id:
          type: integer
          format: int64
        image:
          type: string
        order:
          type: integer
          format: int32
        price:
          type: string
        sortOrder:
          type: integer
          format: int32
    ReadableProductOptionValueList:
      title: ReadableProductOptionValueList
      type: object
      properties:
        number:
          type: integer
          format: int32
        optionValues:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductOptionValueEntity'
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableProductPrice:
      title: ReadableProductPrice
      type: object
      properties:
        description:
          $ref: '#/components/schemas/ProductPriceDescription'
        discounted:
          type: boolean
        finalPrice:
          type: string
        id:
          type: integer
          format: int64
        originalPrice:
          type: string
    ReadableProductReview:
      title: ReadableProductReview
      type: object
      properties:
        customer:
          $ref: '#/components/schemas/ReadableCustomer'
        date:
          type: string
        description:
          type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        productId:
          type: integer
          format: int64
        rating:
          type: number
          format: double
    ReadableProductType:
      title: ReadableProductType
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
    ReadableProductVariant:
      title: ReadableProductVariant
      type: object
      properties:
        name:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductVariantValue'
    ReadableProductVariantValue:
      title: ReadableProductVariantValue
      type: object
      properties:
        name:
          type: string
        option:
          type: integer
          format: int64
        value:
          type: integer
          format: int64
    ReadableSelectedProductVariant:
      title: ReadableSelectedProductVariant
      type: object
      properties:
        options:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductVariantValue'
    ReadableShippingSummary:
      title: ReadableShippingSummary
      type: object
      properties:
        delivery:
          $ref: '#/components/schemas/Address'
        freeShipping:
          type: boolean
        handling:
          type: number
        handlingText:
          type: string
        quoteInformations:
          type: object
          additionalProperties:
            type: string
        selectedShippingOption:
          $ref: '#/components/schemas/ShippingOption'
        shipping:
          type: number
        shippingModule:
          type: string
        shippingOption:
          type: string
        shippingOptions:
          type: array
          items:
            $ref: '#/components/schemas/ShippingOption'
        shippingText:
          type: string
        taxOnShipping:
          type: boolean
    ReadableShoppingCart:
      title: ReadableShoppingCart
      type: object
      properties:
        code:
          type: string
        customer:
          type: integer
          format: int64
        displaySubTotal:
          type: string
        displayTotal:
          type: string
        id:
          type: integer
          format: int64
        language:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/ReadableShoppingCartItem'
        quantity:
          type: integer
          format: int32
        subtotal:
          type: number
        total:
          type: number
        totals:
          type: array
          items:
            $ref: '#/components/schemas/ReadableOrderTotal'
    ReadableShoppingCartAttribute:
      title: ReadableShoppingCartAttribute
      type: object
      properties:
        id:
          type: integer
          format: int64
        language:
          type: string
        option:
          $ref: '#/components/schemas/ReadableShoppingCartAttributeOption'
        optionValue:
          $ref: '#/components/schemas/ReadableShoppingCartAttributeOptionValue'
    ReadableShoppingCartAttributeOption:
      title: ReadableShoppingCartAttributeOption
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int64
        lang:
          type: string
        name:
          type: string
        optionValues:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductOptionValueEntity'
        readOnly:
          type: boolean
        type:
          type: string
    ReadableShoppingCartAttributeOptionValue:
      title: ReadableShoppingCartAttributeOptionValue
      type: object
      properties:
        code:
          type: string
        defaultValue:
          type: boolean
        id:
          type: integer
          format: int64
        image:
          type: string
        name:
          type: string
        price:
          type: string
        sortOrder:
          type: integer
          format: int32
    ReadableShoppingCartItem:
      title: ReadableShoppingCartItem
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductAttribute'
        available:
          type: boolean
        canBePurchased:
          type: boolean
        cartItemattributes:
          type: array
          items:
            $ref: '#/components/schemas/ReadableShoppingCartAttribute'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCategory'
        condition:
          type: string
          enum:
          - NEW
          - USED
        creationDate:
          type: string
        dateAvailable:
          type: string
        description:
          $ref: '#/components/schemas/ProductDescription'
        discounted:
          type: boolean
        displaySubTotal:
          type: string
        finalPrice:
          type: string
        id:
          type: integer
          format: int64
        image:
          $ref: '#/components/schemas/ReadableImage'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ReadableImage'
        manufacturer:
          $ref: '#/components/schemas/ReadableManufacturer'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProductOption'
        originalPrice:
          type: string
        owner:
          $ref: '#/components/schemas/RentalOwner'
        preOrder:
          type: boolean
        price:
          type: number
        productIsFree:
          type: boolean
        productShipeable:
          type: boolean
        productSpecifications:
          $ref: '#/components/schemas/ProductSpecification'
        productVirtual:
          type: boolean
        quantity:
          type: integer
          format: int32
        quantityOrderMaximum:
          type: integer
          format: int32
        quantityOrderMinimum:
          type: integer
          format: int32
        rating:
          type: number
          format: double
        ratingCount:
          type: integer
          format: int32
        refSku:
          type: string
        rentalDuration:
          type: integer
          format: int32
        rentalPeriod:
          type: integer
          format: int32
        rentalStatus:
          type: string
          enum:
          - RENTED
          - AVAILABLE
        sku:
          type: string
        sortOrder:
          type: integer
          format: int32
        subTotal:
          type: number
        type:
          $ref: '#/components/schemas/ReadableProductType'
        visible:
          type: boolean
    ReadableTransaction:
      title: ReadableTransaction
      type: object
      properties:
        amount:
          type: string
        details:
          type: string
        id:
          type: integer
          format: int64
        orderId:
          type: integer
          format: int64
        paymentType:
          type: string
          enum:
          - CREDITCARD
          - FREE
          - COD
          - MONEYORDER
          - PAYPAL
        transactionDate:
          type: string
        transactionType:
          type: string
          enum:
          - INIT
          - AUTHORIZE
          - CAPTURE
          - AUTHORIZECAPTURE
          - REFUND
    ReadableUser:
      title: ReadableUser
      type: object
      properties:
        active:
          type: boolean
        defaultLanguage:
          type: string
        emailAddress:
          type: string
        firstName:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/ReadableGroup'
        id:
          type: integer
          format: int64
        lastAccess:
          type: string
        lastName:
          type: string
        loginTime:
          type: string
        merchant:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/ReadablePermission'
        userName:
          type: string
    ReadableUserList:
      title: ReadableUserList
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReadableUser'
        number:
          type: integer
          format: int32
        recordsFiltered:
          type: integer
          format: int32
        recordsTotal:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    ReadableZone:
      title: ReadableZone
      type: object
      properties:
        code:
          type: string
        countryCode:
          type: string
        id:
          type: integer
          format: int64
        name:
          type: string
    RelatedProduct:
      title: RelatedProduct
      type: object
      properties:
        id:
          type: integer
          format: int64
        relationShipType:
          type: string
    RentalOwner:
      title: RentalOwner
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        emailAddress:
          type: string
        firstName:
          type: string
        id:
          type: integer
          format: int64
        lastName:
          type: string
#    Resource:
#      title: Resource
#      type: object
#      properties:
#        description:
#          type: string
#        file:
#          $ref: '#/components/schemas/File'
#        filename:
#          type: string
#        inputStream:
#          $ref: '#/components/schemas/InputStream'
#        open:
#          type: boolean
#        readable:
#          type: boolean
#        uri:
#          $ref: '#/components/schemas/URI'
#        url:
#          $ref: '#/components/schemas/URL'
    ResponseEntity:
      title: ResponseEntity
      type: object
      properties:
        body:
          type: object
          properties: {}
        statusCode:
          type: string
          enum:
          - 100 CONTINUE
          - 101 SWITCHING_PROTOCOLS
          - 102 PROCESSING
          - 103 CHECKPOINT
          - 200 OK
          - 201 CREATED
          - 202 ACCEPTED
          - 203 NON_AUTHORITATIVE_INFORMATION
          - 204 NO_CONTENT
          - 205 RESET_CONTENT
          - 206 PARTIAL_CONTENT
          - 207 MULTI_STATUS
          - 208 ALREADY_REPORTED
          - 226 IM_USED
          - 300 MULTIPLE_CHOICES
          - 301 MOVED_PERMANENTLY
          - 302 FOUND
          - 302 MOVED_TEMPORARILY
          - 303 SEE_OTHER
          - 304 NOT_MODIFIED
          - 305 USE_PROXY
          - 307 TEMPORARY_REDIRECT
          - 308 PERMANENT_REDIRECT
          - 400 BAD_REQUEST
          - 401 UNAUTHORIZED
          - 402 PAYMENT_REQUIRED
          - 403 FORBIDDEN
          - 404 NOT_FOUND
          - 405 METHOD_NOT_ALLOWED
          - 406 NOT_ACCEPTABLE
          - 407 PROXY_AUTHENTICATION_REQUIRED
          - 408 REQUEST_TIMEOUT
          - 409 CONFLICT
          - 410 GONE
          - 411 LENGTH_REQUIRED
          - 412 PRECONDITION_FAILED
          - 413 PAYLOAD_TOO_LARGE
          - 413 REQUEST_ENTITY_TOO_LARGE
          - 414 URI_TOO_LONG
          - 414 REQUEST_URI_TOO_LONG
          - 415 UNSUPPORTED_MEDIA_TYPE
          - 416 REQUESTED_RANGE_NOT_SATISFIABLE
          - 417 EXPECTATION_FAILED
          - 418 I_AM_A_TEAPOT
          - 419 INSUFFICIENT_SPACE_ON_RESOURCE
          - 420 METHOD_FAILURE
          - 421 DESTINATION_LOCKED
          - 422 UNPROCESSABLE_ENTITY
          - 423 LOCKED
          - 424 FAILED_DEPENDENCY
          - 425 TOO_EARLY
          - 426 UPGRADE_REQUIRED
          - 428 PRECONDITION_REQUIRED
          - 429 TOO_MANY_REQUESTS
          - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
          - 451 UNAVAILABLE_FOR_LEGAL_REASONS
          - 500 INTERNAL_SERVER_ERROR
          - 501 NOT_IMPLEMENTED
          - 502 BAD_GATEWAY
          - 503 SERVICE_UNAVAILABLE
          - 504 GATEWAY_TIMEOUT
          - 505 HTTP_VERSION_NOT_SUPPORTED
          - 506 VARIANT_ALSO_NEGOTIATES
          - 507 INSUFFICIENT_STORAGE
          - 508 LOOP_DETECTED
          - 509 BANDWIDTH_LIMIT_EXCEEDED
          - 510 NOT_EXTENDED
          - 511 NETWORK_AUTHENTICATION_REQUIRED
        statusCodeValue:
          type: integer
          format: int32
    SearchProductList:
      title: SearchProductList
      type: object
      properties:
        categoryFacets:
          type: array
          items:
            $ref: '#/components/schemas/ReadableCategory'
        maxPrice:
          type: number
        minPrice:
          type: number
        productCount:
          type: integer
          format: int32
        products:
          type: array
          items:
            $ref: '#/components/schemas/ReadableProduct'
    SearchProductRequest:
      title: SearchProductRequest
      type: object
      properties:
        count:
          type: integer
          format: int32
        query:
          type: string
        start:
          type: integer
          format: int32
    ShippingOption:
      title: ShippingOption
      type: object
      properties:
        description:
          type: string
        estimatedNumberOfDays:
          type: string
        note:
          type: string
        optionCode:
          type: string
        optionDeliveryDate:
          type: string
        optionId:
          type: string
        optionName:
          type: string
        optionPrice:
          type: number
        optionPriceText:
          type: string
        optionShippingDate:
          type: string
        shippingModuleCode:
          type: string
        shippingQuoteOptionId:
          type: integer
          format: int64
    SizeReferences:
      title: SizeReferences
      type: object
      properties:
        measures:
          type: array
          items:
            type: string
            enum:
            - CM
            - IN
        weights:
          type: array
          items:
            type: string
            enum:
            - LB
            - KG
    URI:
      title: URI
      type: object
      properties:
        absolute:
          type: boolean
        authority:
          type: string
        fragment:
          type: string
        host:
          type: string
        opaque:
          type: boolean
        path:
          type: string
        port:
          type: integer
          format: int32
        query:
          type: string
        rawAuthority:
          type: string
        rawFragment:
          type: string
        rawPath:
          type: string
        rawQuery:
          type: string
        rawSchemeSpecificPart:
          type: string
        rawUserInfo:
          type: string
        scheme:
          type: string
        schemeSpecificPart:
          type: string
        userInfo:
          type: string
#    URL:
#      title: URL
#      type: object
#      properties:
#        authority:
#          type: string
#        content:
#          type: object
#          properties: {}
#        defaultPort:
#          type: integer
#          format: int32
#        deserializedFields:
#          $ref: '#/components/schemas/URLStreamHandler'
#        file:
#          type: string
#        host:
#          type: string
#        path:
#          type: string
#        port:
#          type: integer
#          format: int32
#        protocol:
#          type: string
#        query:
#          type: string
#        ref:
#          type: string
#        serializedHashCode:
#          type: integer
#          format: int32
#        userInfo:
#          type: string
#    URLStreamHandler:
#      title: URLStreamHandler
#      type: object
    UniqueEntity:
      title: UniqueEntity
      type: object
      properties:
        merchant:
          type: string
        unique:
          type: string
    UserPassword:
      title: UserPassword
      type: object
      properties:
        changePassword:
          type: string
        password:
          type: string
    ValueList:
      title: ValueList
      type: object
      properties:
        values:
          type: array
          items:
            type: string
  securitySchemes:
    JWT:
#      BearerAuth:
      type: http
      scheme: bearer
#      type: apiKey
#      name: Authorization
#      in: header
